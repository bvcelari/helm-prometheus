# Default values for argocd-mini-prometheus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: argocd-mini-prom

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

prometheus:
  alertmanager:
    ## If false, alertmanager will not be installed
    ##
    enabled: false

  kubeStateMetrics:
    ## If false, kube-state-metrics sub-chart will not be installed
    ##
    enabled: false

  nodeExporter:
    ## If false, node-exporter will not be installed
    ##
    enabled: false

  pushgateway:
    ## If false, pushgateway will not be installed
    ##
    enabled: false

  server:
    namespaces:
      - argocd-mini-prom
    ingress:
      ####  ## If true, Prometheus server Ingress will be created
      ####  ##
      ####  enabled: true
      ####  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
      ####  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
      ####  # ingressClassName: nginx
      ####  ## Prometheus server Ingress annotations
      ####  ##
      ####  ingressClassName: aws-load-balancer
      ####  annotations: 
      ####    kubernetes.io/ingress.class: alb
      ####    alb.ingress.kubernetes.io/scheme: internet-facing
      ####    alb.ingress.kubernetes.io/target-type: ip
      enabled: true
      annotations:
         kubernetes.io/ingress.class: 'alb'
         kubernetes.io/cluster/general-purpose-mgmt: owned
         #kubernetes.io/tls-acme: 'true'
         alb.ingress.kubernetes.io/scheme: internet-facing
         alb.ingress.kubernetes.io/load-balancer-attributes: 'routing.http2.enabled=true,idle_timeout.timeout_seconds=60'
         alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
         alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'

      service:
        annotations:
          alb.ingress.kubernetes.io/target-type: ip
      labels: {}
      path: /*
      hosts:
         - mini-prom.internala.company.com/*
      

tolerations: []

affinity: {}
